-- Busted command-line runner
package.path = './?.lua;./lib/?.lua;./src/?.lua;'..package.path

local busted = require 'busted'
local cli = require 'cliargs'
local lfs = require 'lfs'

local function sub_dir(dir)
  local dirs = {dir}
  local function yieldtree()
    dir = #dirs and table.remove(dirs, #dirs)
    if dir then
      for entry in lfs.dir(dir) do
        if entry ~= "." and entry ~= ".." and entry:sub(1, 1) ~= "." then
          entry=dir.."/"..entry
          local attr=lfs.attributes(entry)
          if attr.mode == "directory" then
            table.insert(dirs, entry)
          else
            coroutine.yield(entry,attr)
          end
        end
      end

      return yieldtree()
    end
  end
  return coroutine.wrap(yieldtree)
end

cli:set_name("busted")
cli:add_flag("--version", "prints the program's version and exits")

cli:add_argument("ROOT", "test script file/folder")

cli:add_option("-o, --output=LIBRARY", "output library to load", "output_lib", "utf_terminal")
cli:add_option("-l, --lua=luajit", "path to the execution environment (lua or luajit)")
cli:add_option("-d, --cwd=cwd", "path to current working directory")
cli:add_option("-p, --pattern=pattern", "only run test files matching this pattern")
cli:add_option("-t, --tags=tags", "only run tests with these #tags")

cli:add_option("--lang", "language for error messages", "lang", "en")

cli:add_flag("-v", "verbose output of errors")
cli:add_flag("-s, --enable-sound", "executes 'say' command if available")
cli:add_flag("--suppress-pending", "suppress 'pending' test output")
cli:add_flag("--defer-print", "defer print to when test suite is complete")

local args = cli:parse_args()

if args then
  set_busted_options({
    verbose = args.v,
    color = not args.c,
    suppress_pending = args["suppress-pending"],
    defer_print = args["defer-print"],
    utf = not args.u,
    sound = args.s,
    cwd = args.d,
    tags = args.t,
    output_lib = args.output_lib,
    lang = args.lang,
  })

  local pattern = args.p ~= "" and args.p or '_spec.lua'
  if args.version then
    return print("busted: version 0.0.0")
  end

  local root_file = args.ROOT or "spec"
  if args["d"] then
    root_file = args["d"]..root_file
  end

  local file = loadfile(root_file)
  if file then
    file()
  else
    for filename,attr in sub_dir(root_file) do
      if attr.mode == 'file' then
        local path,name,ext = string.match(filename, "(.-)([^\\/]-([^%.]+))$")
        if ext == 'lua' and name:find(pattern) then
          local file, err = loadfile(filename)
          if file then
            file()
          else
            print("An error occurred while loading a test::"..err)
          end
        end
      end
    end
  end

  print(busted().."\n")
end
