<<<<<<< HEAD
--[[
--jUnit output formatter for busted
--ReMake Electric ehf 2012
--Considered to be released under your choice of Apache, 2 clause BSD, ISC or MIT licenses
--]]
--
local output = function()

  local function make_test_xml(index, blob)
    local xx = string.format([[<testcase classname="%s" name="%s">]],
      blob.info.short_src:gsub(".lua", ""), blob["description"])
    local failtext = ""
    if (blob["type"] == "failure") then
      failtext =  "\n" .. string.format([[
<failure type="busted.generalfailure">%s</failure>
  ]], blob.err)
    end
    return (xx .. failtext .. "</testcase>") 
  end

  return {
    header = function(context_tree)
      return [[<?xml version="1.0" encoding="UTF-8" ?>]]
    end,

    footer = function(context_tree)
      -- current busted is busted ;)
      --return("</testsuite>")
    end,

    formatted_status = function(status, options, ms)
      io.write([[<testsuite name="busted_luatests">]], "\n")
      for i,v in ipairs(status) do
        local test_xml = make_test_xml(i, v)
        io.write(test_xml, "\n")
      end
      io.write("</testsuite>", "\n")
      return ("")
    end,

    currently_executing = function(test_status, options)
      return ("")
    end
  }
end

return output
=======
local xml = require "pl.xml"

local hostname = assert ( io.popen ( "uname -n" ) ):read ( "*l" )

return function ()
	local node
	return {
		header = function(context_tree)
			node = xml.new("testsuite",{
				errors    = 0 ;
				failures  = 0 ;
				hostname  = hostname ;
				name      = context_tree.description ;
				tests     = 0 ;
				--time      = ;
				timestamp = os.time ( ) ;
				skip      = 0 ;
			})
		end ;
		footer = function(context_tree)
		end ;
		formatted_status = function(statuses, options, ms)
			node.attr.time = ms
			return xml.tostring ( node , "" , "\t" )
		end ;
		currently_executing = function(test_status, options,...)
			-- Update counters
			node.attr.tests = node.attr.tests + 1
			if test_status.type == "failure" then
				node.attr.failures = node.attr.failures + 1
			end
			-- Edit node
			node:addtag ( "testcase" , {
					classname = test_status.info.short_src .. ":" .. test_status.info.linedefined;
					name      = test_status.description ;
					--time      = ;
				})
			if test_status.type == "failure" then
				node:addtag ( "failure" , {
						message = test_status.err ;
						--type    = ;
					})
					:text ( test_status.trace )
					:up()
			end
			node:up()
		end ;
	}
end
>>>>>>> daurnimator/junit
